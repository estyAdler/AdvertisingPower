/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-file-upload.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from "@angular/core";
import { BytesPipe } from "./bytes/bytes.pipe";
import { MatProgressBarModule, MatCardModule, MatButtonModule, MatIconModule, } from "@angular/material";
import { CommonModule } from "@angular/common";
import { HttpClientModule } from "@angular/common/http";
import { MatFileUploadQueueComponent } from "./mat-file-upload-queue/mat-file-upload-queue.component";
import { MatFileUploadComponent } from "./mat-file-upload/mat-file-upload.component";
import { FileUploadInputForDirective } from "./file-upload-input-for/file-upload-input-for.directive";
var MatFileUploadModule = /** @class */ (function () {
    function MatFileUploadModule() {
    }
    MatFileUploadModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        BytesPipe,
                        MatFileUploadQueueComponent,
                        MatFileUploadComponent,
                        FileUploadInputForDirective,
                    ],
                    imports: [
                        MatProgressBarModule,
                        MatCardModule,
                        MatButtonModule,
                        MatIconModule,
                        HttpClientModule,
                        CommonModule,
                    ],
                    exports: [
                        BytesPipe,
                        MatFileUploadQueueComponent,
                        MatFileUploadComponent,
                        FileUploadInputForDirective,
                    ],
                },] }
    ];
    return MatFileUploadModule;
}());
export { MatFileUploadModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZpbGUtdXBsb2FkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbWF0ZXJpYWwtZmlsZXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9tYXQtZmlsZS11cGxvYWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDL0MsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsZUFBZSxFQUNmLGFBQWEsR0FDZCxNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUV0RztJQUFBO0lBc0JrQyxDQUFDOztnQkF0QmxDLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osU0FBUzt3QkFDVCwyQkFBMkI7d0JBQzNCLHNCQUFzQjt3QkFDdEIsMkJBQTJCO3FCQUM1QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1Asb0JBQW9CO3dCQUNwQixhQUFhO3dCQUNiLGVBQWU7d0JBQ2YsYUFBYTt3QkFDYixnQkFBZ0I7d0JBQ2hCLFlBQVk7cUJBQ2I7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLFNBQVM7d0JBQ1QsMkJBQTJCO3dCQUMzQixzQkFBc0I7d0JBQ3RCLDJCQUEyQjtxQkFDNUI7aUJBQ0Y7O0lBQ2lDLDBCQUFDO0NBQUEsQUF0Qm5DLElBc0JtQztTQUF0QixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCeXRlc1BpcGUgfSBmcm9tIFwiLi9ieXRlcy9ieXRlcy5waXBlXCI7XG5pbXBvcnQge1xuICBNYXRQcm9ncmVzc0Jhck1vZHVsZSxcbiAgTWF0Q2FyZE1vZHVsZSxcbiAgTWF0QnV0dG9uTW9kdWxlLFxuICBNYXRJY29uTW9kdWxlLFxufSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWxcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IE1hdEZpbGVVcGxvYWRRdWV1ZUNvbXBvbmVudCB9IGZyb20gXCIuL21hdC1maWxlLXVwbG9hZC1xdWV1ZS9tYXQtZmlsZS11cGxvYWQtcXVldWUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBNYXRGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSBcIi4vbWF0LWZpbGUtdXBsb2FkL21hdC1maWxlLXVwbG9hZC5jb21wb25lbnRcIjtcbmltcG9ydCB7IEZpbGVVcGxvYWRJbnB1dEZvckRpcmVjdGl2ZSB9IGZyb20gXCIuL2ZpbGUtdXBsb2FkLWlucHV0LWZvci9maWxlLXVwbG9hZC1pbnB1dC1mb3IuZGlyZWN0aXZlXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEJ5dGVzUGlwZSxcbiAgICBNYXRGaWxlVXBsb2FkUXVldWVDb21wb25lbnQsXG4gICAgTWF0RmlsZVVwbG9hZENvbXBvbmVudCxcbiAgICBGaWxlVXBsb2FkSW5wdXRGb3JEaXJlY3RpdmUsXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBNYXRQcm9ncmVzc0Jhck1vZHVsZSxcbiAgICBNYXRDYXJkTW9kdWxlLFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRJY29uTW9kdWxlLFxuICAgIEh0dHBDbGllbnRNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgQnl0ZXNQaXBlLFxuICAgIE1hdEZpbGVVcGxvYWRRdWV1ZUNvbXBvbmVudCxcbiAgICBNYXRGaWxlVXBsb2FkQ29tcG9uZW50LFxuICAgIEZpbGVVcGxvYWRJbnB1dEZvckRpcmVjdGl2ZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0RmlsZVVwbG9hZE1vZHVsZSB7fVxuIl19